//@import 'libs/bourbon'; // http://bourbon.io/
@import 'variables/*';
@import 'partials/*';

:root {
	--color-trigger-default: $cHighlight;
	--color-trigger-highlight: $cSecondary;
}

/* -------------------------------- 

Primary style

-------------------------------- */

*, *::after, *::before {
	box-sizing: border-box;
}

html {
	font-size: 62.5%;
}

body {
	font: {
		size: 1.6rem;
		family: $fPrimary; // variables inside partials > _variables.scss
	}
	color: $cPrimary;
	background-color: $cDefault;
}

a {
	color: $cSecondary;
	text-decoration: none;
}

/* -------------------------------- 

Patterns - reusable parts of our design

-------------------------------- */

.cd-btn {
	display: inline-block;
	padding: 1.6em 2.4em;
	font-size: 1.4rem;
	letter-spacing: .15em;	
	color: $cDefault;
	font-weight: 700;
	text-transform: uppercase;
	background-color: $cSecondary;
	box-shadow: 0 2px 10px rgba(#000, .08);
	@include font-smoothing;
	transition: box-shadow .3s ease;

	.no-touch &:hover {
		box-shadow: 0 6px 20px rgba(#000, .1);
	}
}

/* -------------------------------- 

Typography

-------------------------------- */

h1 {
	font-size: 2.6rem;
	line-height: 1;
	margin-bottom: 1em;
	font-family: $fSecondary;
	font-style: italic;

	@include MQ(M) {
		font-size: 5rem;
	}
}

/* -------------------------------- 

Main Content

-------------------------------- */

.cd-main-content {
	position: relative;
	z-index: 1;
	width: 100%;
	height: 100vh;
	/* vertically align its content */
	display: flex;
	background-color: $cBackground;
	align-items: center;
	justify-content: center;
	flex-direction: column;

	.center {
		/* vertically align inside parent element */
		display: flex;
		width: 100%;
		height: 100%;
		text-align: center;
		align-items: center;
		justify-content: center;
		flex-direction: column;
	}
}

/* -------------------------------- 

Modal window 

-------------------------------- */

.cd-modal {
	position: fixed;
	top: 0;
	left: 0;
	z-index: 3;
	height: 100%;
	width: 100%;
	overflow: hidden;
	background: $cTertiary url(../img/modal-bg.jpg) no-repeat center center;
	background-size: cover;
	opacity: 0;
	visibility: hidden;
	transition: opacity .3s 0s, visibility 0s .3s;

	.modal-content {
		height: 100%;
		overflow-y: auto;
		padding: 3em 5%;
		color: $cBackground;
		@include font-smoothing;
	}

	h1 {
		text-align: center;

		&::after {
			/* ink/brush separation */
			content: '';
			display: block;
			width: 130px;
			height: 18px;
			background: url(../img/ink-separation.svg) no-repeat center center;
			margin: .2em auto 0;
		}
	}

	p, ul {
		line-height: 1.6;
		margin: 2em auto;
		max-width: 800px;
	}

	ul {
		list-style-type: urdu;
		padding-left: 20px;
	}

	.modal-close {
		/* 'X' icon */
		position: absolute;
		z-index: 1;
		top: 20px;
		right: 5%;
		height: 45px;
		width: 45px;
		border-radius: 50%;
		background: rgba(#000, .3) url(../img/cd-icon-close.svg) no-repeat center center;
		
		/* image replacement */
		overflow: hidden;
		text-indent: 100%;
		white-space: nowrap;
		
		visibility: hidden;
		opacity: 0;
		transform: scale(0);
		transition: transform .3s 0s, visibility 0s .3s, opacity .3s 0s;

		.no-touch &:hover {
			background-color: rgba(#000, .5);
		}
	}

	&.visible {
		opacity: 1;
		visibility: visible;
		transition: opacity .7s, visibility 0s;

		.modal-content {
			/* this fixes the buggy scrolling on webkit browsers - mobile devices only - when overflow property is applied */
			-webkit-overflow-scrolling: touch;
		}

		.modal-close {
			visibility: visible;
			opacity: 1;
			transition: transform .3s 0s, visibility 0s 0s, opacity .3s 0s;
			transform: scale(1);
		}
	}

	@include MQ(L) {
		.modal-content {
			padding: 6em 5%;
		}

		.modal-close { 
			height: 60px;
			width: 60px;
		}

		p, ul {
			font-size: 2rem;
		}
	}
}

/* -------------------------------- 

Transition Layer 

-------------------------------- */

.cd-transition-layer {
	position: fixed;
	top: 0;
	left: 0;
	z-index: 2;
	height: 100%;
	width: 100%;
	opacity: 0;
	visibility: hidden;
	overflow: hidden;

	.bg-layer {
		position: absolute;
		left: 50%;
		top: 50%;
		transform: translateY(-50%) translateX(-2%);
		/* its dimentions will be overwritten using jQuery to proportionally fit the viewport */
		height: 100%;
		/* our sprite is composed of 25 frames */ 
		width: 2500%;
		background: url(../img/ink.png) no-repeat 0 0;
		background-size: 100% 100%;
	}

	&.visible {
		opacity: 1;
		visibility: visible;
	}

	&.opening .bg-layer {
		animation: cd-sequence .8s steps(24);
		animation-fill-mode: forwards;
	}

	&.closing .bg-layer {
		animation: cd-sequence-reverse .8s steps(24);
		animation-fill-mode: forwards;
	}

	.no-cssanimations & {
		display: none;
	}
}

@keyframes cd-sequence {
	0% {
		/* translateX(-2%) is used to horizontally center the first frame inside the viewport */
		transform: translateY(-50%) translateX(-2%);
	}
	100% {
		/* translateX(-98%) (2% + 96) is used to horizontally center the last frame inside the viewport  */
   		transform: translateY(-50%) translateX(-98%);
	}
}

@keyframes cd-sequence-reverse {
	0% {
		transform: translateY(-50%) translateX(-98%);
	}
	100% {
   		transform: translateY(-50%) translateX(-2%);
	}
}

@keyframes hover-letters {
	0% {
		transform: translateY(0) translateX(0);
	}
	50% {
		transform: translateY(10px) translateX(0);
	}
	100% {
		transform: translateY(0) translateX(0);
	}
}

main {
	position: relative;
	overflow: hidden;

	&.mouseMoved h1 span.letter {
		position: absolute;
	}

	&.noAnimation {
		h1 span.letter {
			animation: none; 
		}
	}

	h1 {
		text-transform: uppercase;
		//letter-spacing: 5px;
		max-width: 75%;
		min-height: 120px;
		margin: 0 auto;
	}

	span.word {
		white-space: normal;
	}

	h1 span.letter {
		transition: all .3s linear;
		animation: hover-letters 2s infinite linear;
		display: inline-block;
	}

	// @for $i from 1 through 30 {
	// 	span.letter:nth-child(#{$i}) {
	// 		animation-delay: $i * 0.3s;
	// 	}
	// }
	@for $i from 1 through 20 {
		span.word:nth-child(#{$i}) {
			@for $j from 1 through 30 {
				span.letter:nth-child(#{$j}) {
					$delay: $i * $j * .1s;

					@while ($delay > 2s) {
						$delay: $delay - 2s
					}

					animation-delay: $delay;
				}
			}
		}
	}
	
}